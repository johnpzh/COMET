# Graph Neural NetwoRK (GNN)
# A[i,j] = (B[i,k] * C[k,h]) * D[h,j]; A sparse-dense matrix multiplication (SpMM) followed by a dense matrix multiplication (M
# B[i,k] is sparse, the rest is dense

def main() {
    #IndexLabel Declarations
    IndexLabel [i] = [?];
    IndexLabel [k] = [?];
    IndexLabel [j] = [16];
    IndexLabel [h] = [16];

    #Tensor Declarations
    Tensor<double> B([i, k], {CSR});
    Tensor<double> C([k, h], {Dense});
    Tensor<double> D([h, j], {Dense});
    Tensor<double> A([i, j], {Dense});
    Tensor<double> T([i, h], {Dense});

    #Tensor Data Initialization
    B[i, k] = comet_read(0);
    C[k, h] = 1.2;
    D[h, j] = 3.4;
    A[i, j] = 0.0;
    T[i, h] = 0.0;

    var startTime = getTime();
    T[i, h] = B[i,k] * C[k,h];
    A[i, j] = T[i, h] * D[h, j];
    var endTime = getTime();
    printElapsedTime(startTime, endTime);
}

