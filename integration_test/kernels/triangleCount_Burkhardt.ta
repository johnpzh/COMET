# Triangle Counting Algorithm: Burkhardt
# Given a symmetric graph A with no-self edges, triangleCount counts the
# number of triangles in the graph.  A triangle is a clique of size three,
# that is, three nodes that are all pairwise connected.

# Reference for the Burkhardt method:  Burkhardt, Paul. "Graphing Trillions of
# Triangles." Information Visualization 16, no. 3 (July 2017): 157â€“66.
# https://doi.org/10.1177/1473871616666393.

# Method Burkhardt:  ntri = sum (sum ((A^2) .* A)) / 6

# RUN: comet-opt --opt-comp-workspace --convert-ta-to-it --convert-to-loops %s &> triangleCount_Burkhardt.mlir
# RUN: mlir-opt --convert-scf-to-std --convert-std-to-llvm triangleCount_Burkhardt.mlir &> triangleCount_Burkhardt.llvm
# RUN: export SPARSE_FILE_NAME0=%comet_integration_test_data_dir/tc.mtx
# RUN: mlir-cpu-runner triangleCount_Burkhardt.llvm -O3 -e main -entry-point-result=void -shared-libs=%comet_utility_library_dir/libcomet_runner_utils%shlibext | FileCheck %s

def main() {
    #IndexLabel Declarations
    IndexLabel [i] = [?];
    IndexLabel [j] = [?];
    IndexLabel [k] = [?];

    #Tensor Declarations
    Tensor<double> A1([i, j], {CSR});
    Tensor<double> A2([j, k], {CSR});
    Tensor<double> A3([i, k], {CSR});

    #Tensor Data Initialization
    A1[i, j] = read_from_file(0);
    A2[j, k] = read_from_file(0);
    A3[i, k] = read_from_file(0);

    # Burkhardt method: ntri = sum (sum ((A^2) .* A)) / 6
    var ntri = SUM((A1[i,j] * A2[j,k]) .* A3[i,k]) / 6;
    print(ntri);
}

# Print the result for verification.
# CHECK: data = 
# CHECK-NEXT: 5,