# Triangle Counting Algorithm: Sandia_UU
# Given a symmetric graph A with no-self edges, triangleCount counts the
# number of triangles in the graph.  A triangle is a clique of size three,
# that is, three nodes that are all pairwise connected.

# Reference for the Sandia method:  M. Wolf and et. al., "Fast linear algebra-based 
# triangle counting with KokkosKernels," IEEE High Performance Extreme Computing Conference 2017.
# https://doi.org/10.1109/HPEC.2017.8091043

# Method Sandia_UU:      ntri = sum (sum ((U * U) .* U))

# U is a the strictly upper triangular parts of the symmetrix matrix A.

# RUN: comet-opt --opt-comp-workspace --convert-ta-to-it --convert-to-loops %s &> triangleCount_SandiaUU.mlir
# RUN: mlir-opt --convert-scf-to-std --convert-std-to-llvm triangleCount_SandiaUU.mlir &> triangleCount_SandiaUU.llvm
# RUN: export SPARSE_FILE_NAME0=%comet_integration_test_data_dir/tc.mtx
# RUN: mlir-cpu-runner triangleCount_SandiaUU.llvm -O3 -e main -entry-point-result=void -shared-libs=%comet_utility_library_dir/libcomet_runner_utils%shlibext | FileCheck %s

def main() {
    #IndexLabel Declarations
    IndexLabel [i] = [?];
    IndexLabel [j] = [?];
    IndexLabel [k] = [?];

    #Tensor Declarations
    Tensor<double> U0([i, j], {CSR});
    Tensor<double> U1([i, k], {CSR});
    Tensor<double> U2([k, j], {CSR});

    #Tensor Data Initialization
    U0[i, j] = comet_read(0, 4);  # UPPER_TRI_STRICT
    U1[i, k] = comet_read(0, 4);
    U2[k, j] = comet_read(0, 4);

    # Sandia_UU method: ntri = sum (sum ((U * U) .* U))
    var ntri = SUM((U1[i,k] * U2[k,j]) .* U0[i,j]);
    print(ntri);
}

# Print the result for verification.
# CHECK: data = 
# CHECK-NEXT: 5,