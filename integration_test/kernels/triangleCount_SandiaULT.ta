# Triangle Counting Algorithm: Sandia_ULT
# Given a symmetric graph A with no-self edges, triangleCount counts the
# number of triangles in the graph.  A triangle is a clique of size three,
# that is, three nodes that are all pairwise connected.

# Reference for this method: Wolf, Deveci, Berry, Hammond,
# Rajamanickam, "Fast linear algebra- based triangle counting with
# KokkosKernels", IEEE HPEC'17, https://dx.doi.org/10.1109/HPEC.2017.8091043

# Sandia_ULT: ntri = sum (sum ((U * L') .* U)).  Note that U=L'.

# L and U are the strictly lower and strictly upper triangular parts of the symmetrix matrix A,
# respectively.

# RUN: comet-opt --opt-comp-workspace --convert-ta-to-it --convert-to-loops %s &> triangleCount_SandiaULT.mlir
# RUN: mlir-opt --convert-scf-to-std --convert-std-to-llvm triangleCount_SandiaULT.mlir &> triangleCount_SandiaULT.llvm
# RUN: export SPARSE_FILE_NAME0=%comet_integration_test_data_dir/tc.mtx
# RUN: export SORT_TYPE=SEQ_QSORT
# RUN: mlir-cpu-runner triangleCount_SandiaULT.llvm -O3 -e main -entry-point-result=void -shared-libs=%comet_utility_library_dir/libcomet_runner_utils%shlibext | FileCheck %s

def main() {
    #IndexLabel Declarations
    IndexLabel [i] = [?];
    IndexLabel [j] = [?];
    IndexLabel [k] = [?];

    #Tensor Declarations
    Tensor<double> U1([i, j], {CSR});
    Tensor<double> U2([i, k], {CSR}); #copy of U
    Tensor<double> L([k, j], {CSR});


    #Tensor Data Initialization
    U[i, j] = comet_read(0, 4);  # UPPER_TRI_STRICT
    A[i, k] = comet_read(0, 4);
    L[k, j] = comet_read(0, 2);  # LOWER_TRI_STRICT

    # Sandia_ULT method: ntri = sum (sum ((U * L') .* U)).  Note that U=L'.
    var ntri = SUM((U1[i, j] * transpose(L[k, j],{j,k})) .* U2[i,k]);
    print(ntri);
}

# Print the result for verification.
# CHECK: data = 
# CHECK-NEXT: 5,