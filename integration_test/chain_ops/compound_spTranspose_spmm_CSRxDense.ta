# RUN: comet-opt --convert-ta-to-it --convert-to-loops %s &> compound_spTranspose_spmm_CSRxDense.mlir
# RUN: mlir-opt --convert-scf-to-std --convert-std-to-llvm compound_spTranspose_spmm_CSRxDense.mlir &> compound_spTranspose_spmm_CSRxDense.llvm
# RUN: export SPARSE_FILE_NAME0=%comet_integration_test_data_dir/test_rank2.mtx
# RUN: export SORT_TYPE=SEQ_QSORT
# RUN: mlir-cpu-runner compound_spTranspose_spmm_CSRxDense.llvm -O3 -e main -entry-point-result=void -shared-libs=%mlir_utility_library_dir/libmlir_runner_utils%shlibext,%comet_utility_library_dir/libcomet_runner_utils%shlibext | FileCheck %s

## GOOD TEST (merge request)
# SPMM: output is dense
# SpM .* dM = SpM

# TBD: add spM * spM = SpM test case with opt-workspace

def main() {
	#IndexLabel Declarations
	IndexLabel [i] = [?];
	IndexLabel [j] = [?];      
    IndexLabel [k] = [5];     

	#Tensor Declarations
	Tensor<double> A([i, j], CSR);	  
    Tensor<double> B([i, k], Dense);
    Tensor<double> C([j, k], Dense);

    #Tensor Readfile Operation      
    A[i, j] = read_from_file(0);
    B[i, k] = 1.0;
    C[j, k] = 0.0;

	#Tensor Transpose
	C[j, k] = transpose(A[i, j],{j,i}) * B[i, k];
	print(C);
}

# Print the result for verification.
# CHECK: data =
# CHECK-NEXT: 5.1,5.1,5.1,5.1,5.1,7.2,7.2,7.2,7.2,7.2,3,3,3,3,3,5.4,5.4,5.4,5.4,5.4,7.5,7.5,7.5,7.5,7.5,