# RUN: comet-opt --convert-ta-to-it --convert-to-loops %s &> Dense_eltwise_sTranspose_CSR.mlir
# RUN: mlir-opt --convert-linalg-to-loops --convert-scf-to-std --convert-std-to-llvm Dense_eltwise_sTranspose_CSR.mlir &> Dense_eltwise_sTranspose_CSR.llvm
# RUN: export SPARSE_FILE_NAME0=%comet_integration_test_data_dir/test_rank2_small.mtx
# RUN: export SORT_TYPE=SEQ_QSORT
# RUN: mlir-cpu-runner Dense_eltwise_sTranspose_CSR.llvm -O3 -e main -entry-point-result=void -shared-libs=%mlir_utility_library_dir/libmlir_runner_utils%shlibext,%comet_utility_library_dir/libcomet_runner_utils%shlibext | FileCheck %s

## GOOD TEST (merge request)
# # SpM .* dM = SpM

def main() {
	#IndexLabel Declarations
	IndexLabel [i] = [?];
	IndexLabel [j] = [?];                   

	#Tensor Declarations
	Tensor<double> B([i, j], CSR);
	Tensor<double> C([j, i], CSR);
	Tensor<double> A([j, i], Dense);	  

    #Tensor Readfile Operation      
    B[i, j] = read_from_file(0);
	C[j, i] = 0.0;
	A[j, i] = 3.2;
	
	#Tensor Transpose
	C[j, i] = A[j, i] .* transpose(B[i, j],{j,i});
	print(C);
}

# Print the result for verification.
# CHECK: data = 
# CHECK-NEXT: 5,
# CHECK-NEXT: data = 
# CHECK-NEXT: -1,
# CHECK-NEXT: data = 
# CHECK-NEXT: 0,2,4,5,7,
# CHECK-NEXT: data = 
# CHECK-NEXT: 0,1,1,3,4,0,4,
# CHECK-NEXT: data = 
# CHECK-NEXT: 3.2,9.6,12.8,16,19.2,6.4,22.4,