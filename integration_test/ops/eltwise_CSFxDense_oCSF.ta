# RUN: comet-opt --convert-ta-to-it --convert-to-loops %s &> eltwise_CSFxDense_oCSF.mlir
# RUN: mlir-opt --convert-scf-to-std --convert-std-to-llvm eltwise_CSFxDense_oCSF.mlir &> eltwise_CSFxDense_oCSF.llvm
# RUN: export SPARSE_FILE_NAME0=%comet_integration_test_data_dir/test_rank3.tns
# RUN: mlir-cpu-runner eltwise_CSFxDense_oCSF.llvm -O3 -e main -entry-point-result=void -shared-libs=%mlir_utility_library_dir/libmlir_runner_utils%shlibext,%comet_utility_library_dir/libcomet_runner_utils%shlibext | FileCheck %s

def main() {
	#IndexLabel Declarations
	IndexLabel [a] = [?];
	IndexLabel [b] = [?];            
	IndexLabel [c] = [?];            

	#Tensor Declarations
	Tensor<double> A([a, b, c], {CSF});	  
	Tensor<double> B([a, b, c], {Dense});
	Tensor<double> C([a, b, c], {CSF});

	#Tensor Readfile Operation
	A[a, b, c] = read_from_file(0);

	#Tensor Fill Operation
	B[a, b, c] = 2.7;

	#Tensor Contraction
	#(TODO): Element wise multiplication for CSF output only calculates the Val array, not the coordinate arrays
	C[a, b, c] = A[a, b, c] .* B[a, b, c];

	print(C);
}

# Print the result for verification.
# TODO: we currently don't update cordinates of the sparse tensor, only the value array.
# CHECK: data = 
# CHECK: data = 
# CHECK: data = 
# CHECK: data = 
# CHECK: data = 
# CHECK: data = 
# CHECK: data = 
# CHECK-NEXT: 3.51,5.697,8.1,
