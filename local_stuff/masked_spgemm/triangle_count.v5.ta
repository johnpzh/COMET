# Sparse matrix sparse matrix multiplication
# Sparse matrix is in CSR format. Currently workspace transformation on the IndexTree dialect works for only CSR format
# RUN: comet-opt --opt-comp-workspace --convert-ta-to-it --convert-to-loops %s &> mult_spgemm_CSRxCSR_oCSR.mlir
# RUN: mlir-opt --convert-scf-to-std --convert-std-to-llvm mult_spgemm_CSRxCSR_oCSR.mlir &> mult_spgemm_CSRxCSR_oCSR.llvm
# RUN: export SPARSE_FILE_NAME0=%comet_integration_test_data_dir/test_rank2.mtx
# RUN: export SPARSE_FILE_NAME1=%comet_integration_test_data_dir/test_rank2.mtx
# RUN: mlir-cpu-runner mult_spgemm_CSRxCSR_oCSR.llvm -O3 -e main -entry-point-result=void -shared-libs=%comet_utility_library_dir/libcomet_runner_utils%shlibext | FileCheck %s


def main() {
    #IndexLabel Declarations
    IndexLabel [a] = [?];
    IndexLabel [b] = [?];

    #Tensor Declarations
    Tensor<double> A([a, b], {CSR});
    Tensor<double> At([b, a], {CSR});
    Tensor<double> B([a, b], {CSR});


    #Tensor Readfile Operation
    A[a, b] = read_from_file(0);
    At[b, a] = read_from_file(0);

    #Tensor Contraction
    var start11 = getTime();

    B[a, b] = A[a, b] * At[b, a];

    var end11 = getTime();
    printElapsedTime(start11, end11);
    #print(s);
}

# Print the result for verification.
# CHECK: data = 
# CHECK-NEXT: 5,
# CHECK-NEXT: data = 
# CHECK-NEXT: 0,
# CHECK-NEXT: data = 
# CHECK-NEXT: 0,2,4,5,7,9,
# CHECK-NEXT: data = 
# CHECK-NEXT: 0,3,1,4,2,0,3,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
# CHECK-NEXT: data = 
# CHECK-NEXT: 6.74,7,17,17.5,9,20.5,21.74,36.4,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,