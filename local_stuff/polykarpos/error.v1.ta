def main() {

  # IndexLabel Declarations
  IndexLabel [i] = [?];                 # dynamic index label, evaluated after file read
  IndexLabel [j] = [?];
  IndexLabel [k] = [?];

  # Tensor Declarations
  Tensor<double> A([i, j], {CSR});        # declare a sparse matrix in CSR format
  Tensor<double> QVip([j, k], {CSR});
  Tensor<double> QEip([j, k], {Dense});
  # Tensor<double> A_t([j, i], {CSR});
  Tensor<double> L([i, k], {Dense});

  # Tensor Readfile Operation
  A[i, j] = comet_read(0);          # read in a sparse matrix @SPARSE_FILE_NAME0
  QVip[j, k] = comet_read(1);          # read in a sparse matrix @SPARSE_FILE_NAME0
  QEip[j,k] = 0.0;
  L[i,k] = 0.0;
  #A[i, j] = random();          # read in a sparse matrix @SPARSE_FILE_NAME0
  #B[j, k] = random();          # read in a sparse matrix @SPARSE_FILE_NAME0

  # Tensor Transpose
  # A_t[j, i] = transpose(A[i, j], {j, i}); # perform sparse transpose @SORT_TYPE
  #L[i,k] = QVip[j,k] * A[i,j];
  L[i,k] =  A[i,j] * QVip[j,k];
  # L[i,k] = QEip[j,k]*A_t[j,i];
  # L[i,k] = QVip[j,k]*A[i,j]*A_t[j,i];
  # print(L);                             # print the sparse output matrix

}